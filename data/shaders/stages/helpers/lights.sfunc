//----- Lights

// @note The lightDirection is defined as the normalized vector
// from the fragment to the light source.
bool epiphanyLight(vec3 position, out vec3 lightDirection, out float lightIntensity) {
    lightIntensity = 0;

    switch (light.type) {
        case LIGHT_TYPE_POINT: {
            vec3 lightPosition;
            lightPosition.x = uintBitsToFloat(light.data[0].x);
            lightPosition.y = uintBitsToFloat(light.data[0].y);
            lightPosition.z = uintBitsToFloat(light.data[0].z);

            lightDirection = lightPosition - position;
            float lightDistance = length(lightDirection);

            float radius = uintBitsToFloat(light.data[1].x);
            if (lightDistance >= radius) return false;

            lightIntensity = 1 - (lightDistance * lightDistance) / (radius * radius);
            break;
        }

        case LIGHT_TYPE_DIRECTIONAL: {
            lightDirection.x = -uintBitsToFloat(light.data[0].x);
            lightDirection.y = -uintBitsToFloat(light.data[0].y);
            lightDirection.z = -uintBitsToFloat(light.data[0].z);

            // @todo Have that settable
            lightIntensity = 1;

            break;
        }

        default: {
            return false;
        }
    }

    lightDirection = normalize(lightDirection);
    return true;
}
