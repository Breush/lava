struct {
    bool valid;
} gBuffer;

uniform {
    float length = 1;
    float time = 0;
    bool anglesValid = true;
    bool placeValid = true;
};

geometry {
    bool main() {
        gBuffer.valid = anglesValid && placeValid;

        if (!placeValid) {
            time = 0;
        }

        if (anglesValid) {
            float intensity = 2 * abs(fract(uv.y * length * 0.5  - time * 3) - 0.5);
            intensity = smoothstep(0.4, 0.6, intensity);

            if (intensity < 0.1) {
                discard;
            }
        } else {
            if (uv.y > 1.5 / length) {
                discard;
            }
        }

        return true;
    }
}

epiphany {
    vec4 main() {
        if (gBuffer.valid) {
            return vec4(0.5, 1, 0.8, 0.75);
        }
        return vec4(1, 0.3, 0.3, 0.75);
    }
}
