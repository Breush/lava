struct {
    nvec3(16) normal;
    vec3 waveColor;
    float ghostFactor;
} gBuffer;

uniform {
    float time = 0;
    float ghostFactor = 1;
    texture2d waveMap = "white";
};

geometry {
    bool main() {
        // @note That UV factor depends on the size of the plane!
        vec2 reuv = 10 * uv;

        float waveJitteriness = 0.1;
        float waveJitterinessSpeed = 0.25;
        vec2 waveUv = waveJitteriness * sin(waveJitterinessSpeed * time) + reuv;

        gBuffer.normal = normalize(tbn[2]); // :NonUniformScaling @fixme This normalize should be useless
        gBuffer.waveColor = texture(waveMap, waveJitteriness * sin(waveJitterinessSpeed * time) + reuv).rgb;
        gBuffer.ghostFactor = ghostFactor;

        return true;
    }
}

epiphany {
    vec4 main() {
        vec3 position = positionFromDepth(fragmentDepth, fragmentPosition);

        vec3 n = gBuffer.normal;
        vec3 v = normalize(camera.position.xyz - position);

        float opacity = max(1 - dot(n, v), 0.5);
        opacity = mix(opacity, 1, gBuffer.ghostFactor);

        vec3 waterColor = vec3(0.3, 0.6, 0.9);
        waterColor = mix(waterColor, vec3(1), dot(n, v));

        // @todo Add environment contribution

        vec3 color = gBuffer.waveColor * waterColor;
        color = mix(color, vec3(0), gBuffer.ghostFactor);
        return vec4(color, opacity);
    }
}
