/**
 * Rendering puzzle panels.
 */

struct {
    vec4 color;
} gBuffer;

geometry {

    uniform {
        vec4 backgroundColor = vec4(1, 1, 1, 1);
        vec2 extent = vec2(3, 3);
        uint symbols[9];
        texture2d backgroundMap = "white";
    };

    bool main() {
        #define LINK_FLAG 0x01
        #define LINK_EAST_FLAG 0x00000100
        #define LINK_NORTH_FLAG 0x00000200
        #define LINK_WEST_FLAG 0x00000400
        #define LINK_SOUTH_FLAG 0x00000800

        vec4 backgroundMapColor = texture(backgroundMap, uv);

        // @fixme Somehow uv.x is reversed in mesh model,
        // we should fix that upstream to prevent this fix.
        vec2 panelUv = vec2(1 - uv.x, uv.y);

        uvec2 square = uvec2(floor(extent * panelUv));
        vec2 squareUv = extent * panelUv - square;

        uint symbol = symbols[uint(extent.y) * square.x + square.y];

        // LINK
        if ((symbol & LINK_FLAG) != 0) {
            // Central square
            if (squareUv.x > 0.4 && squareUv.x < 0.6 && squareUv.y > 0.4 && squareUv.y < 0.6) {
                backgroundColor = vec4(0, 0, 0, 1);
            }

            // East link
            if ((symbol & LINK_EAST_FLAG) != 0 && squareUv.y > 0.45 && squareUv.y < 0.55 && squareUv.x > 0.5) {
                backgroundColor = vec4(0, 0, 0, 1);
            }
            // North link
            if ((symbol & LINK_NORTH_FLAG) != 0 && squareUv.x > 0.45 && squareUv.x < 0.55 && squareUv.y > 0.5) {
                backgroundColor = vec4(0, 0, 0, 1);
            }
            // West link
            if ((symbol & LINK_WEST_FLAG) != 0 && squareUv.y > 0.45 && squareUv.y < 0.55 && squareUv.x < 0.5) {
                backgroundColor = vec4(0, 0, 0, 1);
            }
            // South link
            if ((symbol & LINK_SOUTH_FLAG) != 0 && squareUv.x > 0.45 && squareUv.x < 0.55 && squareUv.y < 0.5) {
                backgroundColor = vec4(0, 0, 0, 1);
            }
        }

        // Overall grid
        if (squareUv.x < 0.01 || squareUv.x > 0.99 || squareUv.y < 0.01 || squareUv.y > 0.99) {
            backgroundColor = vec4(0, 0, 0, 1);
        }

        gBuffer.color = backgroundMapColor * backgroundColor;

        return gBuffer.color.a < 1.0;
    }
}

epiphany {
    vec4 main() {
        return gBuffer.color;
    }
}
